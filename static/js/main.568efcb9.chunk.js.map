{"version":3,"sources":["App.js","index.js"],"names":["api","App","useState","query","setQuery","weather","setWeather","className","main","temp","onSubmit","e","preventDefault","fetch","then","res","json","result","console","log","type","placeholder","onChange","target","value","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","Math","round","temp_min","ceil","temp_max","ReactDOM","render","document","getElementById"],"mappings":"gLACMA,EACC,mCADDA,EAEE,2CAmFOC,MAhFf,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNC,EADM,KACCC,EADD,OAEiBF,mBAAS,IAF1B,mBAENG,EAFM,KAEGC,EAFH,KAyCb,OACE,qBAAKC,UAAmC,oBAAhBF,EAAQG,MAAyBH,EAAQG,KAAKC,KAAO,GAAM,YAAuB,MAA1G,SACE,iCACE,qBAAKF,UAAU,aAAf,SACE,sBAAMG,SA9BU,SAACC,GACvBA,EAAEC,iBAEET,GACFU,MAAM,GAAD,OAAIb,EAAJ,qBAAyBG,EAAzB,+BAAqDH,IACvDc,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJX,EAAWW,GACXb,EAAS,IACTc,QAAQC,IAAIF,OAqBZ,SACA,uBACEG,KAAK,OACLb,UAAU,aACVc,YAAY,YACZC,SAAU,SAAAX,GAAC,OAAIP,EAASO,EAAEY,OAAOC,QACjCA,MAAOrB,QAKgB,qBAAjBE,EAAQG,KAClB,sBAAKD,UAAU,eAAf,UACE,sBAAKA,UAAU,eAAf,UACE,sBAAKA,UAAU,WAAf,UAA2BF,EAAQoB,KAAnC,KAA2CpB,EAAQqB,IAAIC,WACvD,qBAAKpB,UAAU,OAAf,SA/BU,SAACqB,GACnB,IAGIC,EAFO,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAE/DD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EALS,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAKzGL,EAAEM,YACjBC,EAAOP,EAAEQ,cAEb,MAAM,GAAN,OAAUP,EAAV,YAAiBE,EAAjB,YAAyBE,EAAzB,cAAoCE,GAsBLE,CAAY,IAAIC,WAEzC,sBAAK/B,UAAU,cAAf,UACE,sBAAKA,UAAU,OAAf,UACGgC,KAAKC,MAAMnC,EAAQG,KAAKC,MAD3B,WAGA,sBAAKF,UAAU,iBAAf,UACE,sBAAKA,UAAU,WAAf,UAA2BgC,KAAKC,MAAMnC,EAAQG,KAAKiC,UAAnD,WACA,qBAAKlC,UAAU,YACf,sBAAKA,UAAU,WAAf,UAA2BgC,KAAKG,KAAKrC,EAAQG,KAAKmC,UAAlD,cAEF,qBAAKpC,UAAU,UAAf,SAA0BF,EAAQA,QAAQ,GAAGG,aAG5C,SC3EboC,IAASC,OACP,mCACI,cAAC,EAAD,MAEJC,SAASC,eAAe,W","file":"static/js/main.568efcb9.chunk.js","sourcesContent":["import React, { useState } from 'react';\nconst api = {\n  key: \"03561e1b3667cdbdfc6b076a78dc7113\",\n  base: \"https://api.openweathermap.org/data/2.5/\"\n}\n\nfunction App() {\n  const [query, setQuery] = useState('');\n  const [weather, setWeather] = useState({});\n\n  // const search = evt => {\n  //   if (evt.key === \"Enter\") {\n  //     fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n  //       .then(res => res.json())\n  //       .then(result => {\n  //         setWeather(result);\n  //         setQuery('');\n  //         console.log(result);\n  //       });\n  //   }\n  // }\n  const onSubmitHandler = (e) => {\n    e.preventDefault();\n\n    if (query) {\n      fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n        .then(res => res.json())\n        .then(result => {\n          setWeather(result);\n          setQuery('');\n          console.log(result);\n        });\n    }\n}\n\n  const dateBuilder = (d) => {\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"];\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n\n    return `${day} ${date} ${month} , ${year}`\n  }\n\n  return (\n    <div className={(typeof weather.main != \"undefined\") ? ((weather.main.temp > 16) ? 'app sunny' : 'app') : 'app'}>\n      <main>\n        <div className=\"search_box\">\n          <form onSubmit={onSubmitHandler}>\n          <input \n            type=\"text\"\n            className=\"search_bar\"\n            placeholder=\"Search...\"\n            onChange={e => setQuery(e.target.value)}\n            value={query}\n            // onKeyPress={search}\n          />\n        </form>\n        </div>\n        {( typeof weather.main !== \"undefined\") ? (\n        <div className=\"below_search\">\n          <div className=\"location_box\">\n            <div className=\"location\">{weather.name}, {weather.sys.country}</div>\n            <div className=\"date\">{dateBuilder(new Date())}</div>\n          </div>\n          <div className=\"weather_box\">\n            <div className=\"temp\">\n              {Math.round(weather.main.temp)}°c\n            </div>\n            <div className=\"temp_container\">\n              <div className=\"min_temp\">{Math.round(weather.main.temp_min)}°c</div>\n              <div className=\"min_tem\"></div>\n              <div className=\"max_temp\">{Math.ceil(weather.main.temp_max)}°c</div>\n            </div>\n            <div className=\"weather\">{weather.weather[0].main}</div>\n          </div>\n        </div>\n        ) : ('')}\n      </main>\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <>\n      <App/>\n  </>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n// reportWebVitals();\n"],"sourceRoot":""}